#coding=utf8
import random
import argparse
import time
import lasagne
import numpy as np
import theano
import theano.tensor as T
from sklearn.preprocessing import LabelBinarizer,label_binarize

def get_dataset(dimention=10):
    order_list=[[],[],[],[],[],[],[],[],[],[]]
    x=np.random.random((10000,dimention))
    y=np.zeros((10000))
    for i in (x):
        y=int(i[0]/0.1)
        order_list[y].append(i)

    total_roads=500
    path_length=10
    total_label=3
    final_x=np.zeros((total_roads,path_length,dimention))
    final_y=np.zeros((total_roads,path_length))
    for one_sample in range(total_roads):
        label_list=random.sample(range(dimention),total_label)
        one_shoot_label=label_list[-1]
        insert_idx=np.random.randint(0,path_length-1)
        final_x[one_sample,insert_idx]=random.sample(order_list[one_shoot_label],1)[0]
        final_y[one_sample,insert_idx]=one_shoot_label
        final_x[one_sample,-1]=random.sample(order_list[one_shoot_label],1)[0]
        final_y[one_sample,-1]=one_shoot_label
        for i in range(path_length-1):
            if i!=insert_idx:
                label=np.random.choice(label_list[:-1])
                final_y[one_sample,i]=label
                final_x[one_sample,i,:]=random.sample(order_list[label],1)[0]
    return final_x,np.int32(final_y)



class Model:
    def __init__(self,dimension=50,n_classes=10,batch_size=32,n_epoch=50,path_length=10,
                 n_paths=1000,max_norm=50,lr=0.05,update_method='sgd',std=0.5,**kwargs):
        self.dimension=dimension
        self.n_classe=n_classes
        self.n_slot=n_classes
        self.batch_size=batch_size
        self.n_epoch=n_epoch
        self.path_length=path_length
        self.n_paths=n_paths
        self.max_norm=max_norm
        self.lr=lr
        self.std=std

        if update_method=='sgd':
            self.update_method=lasagne.updates.sgd
        elif update_method=='adagrad':
            self.update_method=lasagne.updates.adagrad
        elif update_method=='adadelta':
            self.update_method=lasagne.updates.adadelta
        elif update_method=='rmsprop':
            self.update_method=lasagne.updates.rmsprop
        
    def build(self):
        x_range=T.tensor3()
        x_action=T.tensor3()
        x_reward=T.vector()
        x_memory=T.tensor4()

        self.x_range_shared=theano.shared(np.zeros((self.batch_size,self.path_length,self.dimension),dtype=theano.config.floatX),borrow=True)
        self.x_range_action=theano.shared(np.zeros((self.batch_size,self.path_length,self.n_classes),dtype=theano.config.floatX),borrow=True)
        self.x_range_reward=theano.shared(np.zeros(self.batch_size,dtype=theano.config.floatX),borrow=True)
        self.x_range_memory=theano.shared(np.zeros((self.batch_size,self.path_length,self.n_classes,self.dimension),dtype=theano.config.floatX),borrow=True)

        '''前期的框架模型，主要是得到x到h的映射，以及memory的构建'''
        D1, D2, D3 = lasagne.init.Normal(std=0.1), lasagne.init.Normal(std=0.1), lasagne.init.Normal(std=0.1)
        l_range_in = lasagne.layers.InputLayer(shape=(self.batch_size,self.path_length,self.dimension))
        l_range_flatten = lasagne.layers.ReshapeLayer(l_range_in,[self.batch_size*self.path_length,self.dimension])
        # l_range_dense1 = lasagne.layers.DenseLayer(l_range_flatten,self.dimension,W=D1,nonlinearity=lasagne.nonlinearities.sigmoid)
        l_range_dense2 = lasagne.layers.DenseLayer(l_range_flatten,self.dimension,W=D2,nonlinearity=lasagne.nonlinearities.sigmoid) #[bs*path_length,dimension]
        l_range_hidden=lasagne.layers.ReshapeLayer(l_range_dense2,[self.batch_size*self.path_length,1,self.dimension])
        # l_range_mu = lasagne.layers.DenseLayer(l_range_hidden,self.n_slot,W=D2,nonlinearity=lasagne.nonlinearities.softmax)

        '''Policy Gradient Methods的模型，主要是从Memory状态得到action的概率'''
        l_range_memory_in = lasagne.layers.InputLayer(shape=(self.batch_size,self.path_length,self.n_classe,self.dimension))
        l_range_memory = lasagne.layers.ReshapeLayer(l_range_in,[self.batch_size*self.path_length,self.n_classe,self.dimension])
        l_range_status=lasagne.layers.ConcatLayer((l_range_memory,l_range_hidden),axis=1) #[bs*pl,(n_class+1),dim]
        l_range_mu=lasagne.layers.DenseLayer(l_range_status,self.n_classe,W=D3,nonlinearity=lasagne.nonlinearities.softmax)
        l_range_mu = lasagne.layers.ReshapeLayer(l_range_mu,[self.batch_size,self.path_length,self.n_classes])

        '''模型的总体参数和更新策略等'''
        probas_range = lasagne.layers.helper.get_output(l_range_mu, {l_range_in: x_range,l_range_memory_in:x_memory})
        params=lasagne.layers.helper.get_all_params(l_range_mu,trainable=True)
        givens = {
            x_range: self.x_range_shared,
            x_action: self.x_range_action,
            x_reward: self.x_range_reward,
            x_memory: self.x_range_memory
        }
        cost=-T.mean(T.sum(T.sum(T.log(probas_range)*x_action,axis=2),axis=1)*x_reward)
        grads=T.grad(cost,params)
        scaled_grads = lasagne.updates.total_norm_constraint(grads, self.max_norm)
        updates = lasagne.updates.adagrad(scaled_grads, params, learning_rate=self.lr)

        self.output_model_range = theano.function([],[probas_range,cost],givens=givens,updates=updates,on_unused_input='ignore',allow_input_downcast=True)


    def train(self):
        batch_size=self.batch_size
        n_paths=self.n_paths
        path_length=self.path_length
        xx, yy = get_dataset(10) #xx是[sample,path_length,dimension]，yy是[sample.path_length]
        for epoch in range(self.n_epoch):
            begin_time = time.time()
            batch_total_number = len(xx) / batch_size
            np.random.shuffle(xx)
            for idx_batch in range(batch_total_number):
                # 初始化两个循环的参数，state和概率
                xx_batch = xx[idx_batch * batch_size:(idx_batch + 1) * batch_size]
                xx_batch_0=xx_batch[:,0,:].reshape([xx_batch.shape[0],1,xx_batch.shape[1]]).repeat(path_length,axis=1)
                memory_0=np.zeros((batch_size,path_length,self.n_classe,xx.shape[-1]))
                self.x_range_shared.set_value(xx_batch)
                self.x_range_memory.set_value(memory_0)
                probbb=self.output_model_range()[0]
                pass
                '''
                tmp_cost, tmp_result, tmp_reward = 0, 0, 0
                for repeat_time in range(n_paths):  # 每一个batch都要经过多次重复采样获取不同的道路
                    # 但是第一步的初始化状态都是一样的
                    total_state = np.zeros([batch_size, path_lenth, dimention])
                    total_reward = np.zeros([batch_size, path_lenth])
                    total_action = np.zeros([batch_size, path_lenth])
                    total_probs = np.zeros([batch_size, path_lenth, n_classes])
                    total_state[:, 0, :] = x_batch
                    x_shared.set_value(x_batch)
                    probs_sample_0 = output_model()
                    total_probs[:, 0, :] = probs_sample_0
                    for t in range(path_lenth):  # 进行了10步
                        for idx, prob in enumerate(total_probs[:, t, :]):  # 对于batch里的每一个样本
                            now_state = total_state[idx, t].copy()
                            action, new_state, reward = sample_one_path(now_state, prob)
                            # action, new_state, reward = sample_one_path_plus(now_state, prob)
                            # action是这一步采取的动作，state是进入的新的状态，prob四
                            total_action[idx, t] = action
                            total_reward[idx, t] = reward
                            # 更新state和概率,下一个循环使用
                            if t != path_lenth - 1:
                                total_state[idx, t + 1] = new_state
                            del new_state, now_state

                        if t != path_lenth - 1:
                            x_shared.set_value(total_state[:, t + 1])
                            total_probs[:, t + 1, :] = output_model()

                    x_range_shared.set_value(total_state)
                    x_range_action.set_value(action_to_vector(total_action, n_classes))
                    x_range_reward.set_value(reward_count(total_reward, length=path_lenth, discout=discout))
                    aver_reward = np.mean(np.sum(np.float32(total_reward), axis=1))
                    espect_reward = np.mean(np.float32(reward_count(total_reward,path_lenth,discout=discout)), axis=0)
                    _, cost = output_model_range()
                    tmp_cost += cost
                    tmp_result += aver_reward
                    tmp_reward += espect_reward
                    # print 'cost:{},average_reward:{}'.format(cost,aver_reward)
                    # print _[0]
                    # print '\n\n\n'
                print 'cost:{},average_reward:{},espect_reward:{}'.format(tmp_cost / n_paths, tmp_result / n_paths, tmp_reward/ n_paths)
                # if tmp_result / n_paths > 10:
                if tmp_result / n_paths +10.1 > 10:
                    print total_state[0]
                    print total_action[0]
                    print _[0]
                    print total_reward[0]
                    # print total_probs[0]
                    print '\n\n'

            print 'epoch:{},time:{}'.format(epoch, time.time() - begin_time)
            '''
if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--task', type=int, default=1, help='Task#')
    parser.add_argument('--dimension', type=int, default=50, help='Dimension#')
    parser.add_argument('--n_classes', type=int, default=10, help='Task#')
    parser.add_argument('--batch_size', type=int, default=16, help='Task#')
    parser.add_argument('--n_epoch', type=int, default=50, help='Task#')
    parser.add_argument('--path_length', type=int, default=10, help='Task#')
    parser.add_argument('--n_paths', type=int, default=1000, help='Task#')
    parser.add_argument('--max_norm', type=float, default=50, help='Task#')
    parser.add_argument('--lr', type=float, default=0.05, help='Task#')
    parser.add_argument('--std', type=float, default=0.5, help='Task#')
    parser.add_argument('--update_method', type=str, default='sgd', help='Task#')
    args=parser.parse_args()
    print '*' * 80
    print 'args:', args
    print '*' * 80
    model=Model(**args.__dict__)
    model.train()
